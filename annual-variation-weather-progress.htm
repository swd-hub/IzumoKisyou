<!DOCTYPE html>
<html lang="ja">
<head>
<meta charset="UTF-8">
<meta name="description" content="気象データの日別値と平年値をグラフ化する。">
<title>気象経過</title>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation@latest"></script>
<style>
/* （省略：スタイルはそのまま） */
#loadingOverlay {
  display: none;
  position: fixed;
  top: 0; left: 0; right: 0; bottom: 0;
  background: rgba(255,255,255,0.8);
  z-index: 9999;
  text-align: center;
  padding-top: 20%;
  font-size: 2em;
  color: #333;
}
</style>
</head>
<body>
<h1 id="mainTitle">気象経過　出雲</h1>
<button onclick="window.open('https://www.data.jma.go.jp/gmd/risk/obsdl/index.php','_blank')">気象庁のサイトを開く</button>
<button id="updateButton" type="button" disabled>更新</button>
<span id="csvDates"></span>

<div class="container">
  <form onsubmit="return false;">
    <label>開始日:<input type="date" id="cultivationStartDate"></label>
    <label>終了日:<input type="date" id="cultivationEndDate"></label>
  </form>
</div>

<div id="chartcanvas" style="display:none;">
  <!-- グラフ群（省略、そのまま） -->
</div>

<div id="loadingOverlay">読み込み中…</div>

<script>
let csvData = [];
const updateBtn = document.getElementById('updateButton');
const overlay = document.getElementById('loadingOverlay');

async function loadCSVAndRender() {
  try {
    overlay.style.display = 'block';
    const res = await fetch('出雲日別値.csv');
    const buf = await res.arrayBuffer();
    const content = shiftJISToUTF8(buf);
    csvData = parseCSV(content);
    if (csvData.length > 0) {
      const dates = csvData.map(d => d.date).sort((a,b)=>a-b);
      const min = dates[0], max = dates[dates.length-1];
      document.getElementById('csvDates').textContent = `CSV日付範囲: ${min.toISOString().slice(0,10)} ～ ${max.toISOString().slice(0,10)}`;
      updateDateFields();
      updateMainTitle();
      updateBtn.disabled = false;
      handleGraphUpdate();
    }
  } catch(e) {
    alert('CSV読み込みエラー：' + e);
  } finally {
    overlay.style.display = 'none';
  }
}

function handleGraphUpdate() {
  if (!csvData.length) return;
  const s = document.getElementById('cultivationStartDate').value;
  const e = document.getElementById('cultivationEndDate').value;
  if (!s || !e) { alert('開始日と終了日を入力してください'); return; }

  const startDate = new Date(s), endDate = new Date(e);
  if (isNaN(startDate) || isNaN(endDate)) { alert('日付の形式が正しくありません'); return; }
  if (startDate > endDate) { alert('開始日は終了日より前にしてください'); return; }

  overlay.style.display = 'block';
  setTimeout(() => {
    try {
      const avgStart = new Date(startDate); avgStart.setFullYear(avgStart.getFullYear()-1);
      const avgEnd = new Date(avgStart); avgEnd.setDate(avgEnd.getDate()+364);
      const min = avgStart < startDate ? avgStart : startDate;
      const max = avgEnd > endDate ? avgEnd : endDate;

      const filtered = filterData(csvData, min, max);
      const chartData = prepareComparisonData(filtered, startDate, endDate);
      updateDailyCharts(chartData);

      document.getElementById('chartcanvas').style.display = 'block';
      updateMainTitle();
    } catch(e) {
      alert('グラフ描画中にエラー：' + e);
    } finally {
      overlay.style.display = 'none';
    }
  }, 100);
}

function updateMainTitle() {
  const s = document.getElementById('cultivationStartDate').value;
  const e = document.getElementById('cultivationEndDate').value;
  if (s && e) {
    const sy = new Date(s).getFullYear();
    const ey = new Date(e).getFullYear();
    document.getElementById('mainTitle').textContent = `${sy}年-${ey}年　気象経過`;
  }
}

function updateDateFields() {
  const now = new Date();
  const yyyy = now.getFullYear();
  const mm = String(now.getMonth()+1).padStart(2,'0');
  const dd = String(now.getDate()).padStart(2,'0');
  document.getElementById('cultivationStartDate').value = `${yyyy}-01-01`;
  document.getElementById('cultivationEndDate').value = `${yyyy}-${mm}-${dd}`;
}

// イベント登録
window.addEventListener('DOMContentLoaded', loadCSVAndRender);
updateBtn.addEventListener('click', handleGraphUpdate);
document.getElementById('cultivationStartDate').addEventListener('change', () => { updateMainTitle(); handleGraphUpdate(); });
document.getElementById('cultivationEndDate').addEventListener('change', () => { updateMainTitle(); handleGraphUpdate(); });

// 他のユーティリティ関数（shiftJISToUTF8, parseCSV, filterData, prepareComparisonData, updateDailyCharts）は元のまま
</script>
</body>
</html>
