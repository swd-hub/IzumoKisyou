<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <title>気象経過</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body { font-family: sans-serif; }
    h1 { background-color: #4CAF50; color: white; padding: 10px; text-align: center; }
    .container { padding: 20px; }
    input[type="file"], input[type="date"], input[type="number"] {
      margin: 5px; padding: 8px; font-size: 16px;
    }
    .GraphupdateButton {
      background-color: #4CAF50; color: white;
      padding: 8px 12px; border: none; border-radius: 4px;
      cursor: pointer;
    }
    canvas { max-width: 100%; height: auto !important; margin-top: 20px; }
  </style>
</head>
<body>
  <h1 id="mainTitle">気象経過</h1>
  <div class="container">
    <input type="file" id="fileInput" accept=".csv"><br>
    開始日：<input type="date" id="cultivationStartDate">
    終了日：<input type="date" id="cultivationEndDate">
    <button class="GraphupdateButton" onclick="handleFileSelect()">グラフ更新</button><br>
    気温Max<input type="number" id="tempMax" value="40">
    降水Max<input type="number" id="precMax" value="100">
    日照Max<input type="number" id="sunMax" value="16">
  </div>

  <div class="container">
    <canvas id="dailyTempChart"></canvas>
    <canvas id="dailyPrecChart"></canvas>
    <canvas id="dailySunChart"></canvas>
  </div>
<script>
let csvData = [];
let dailyTempChart, dailyPrecChart, dailySunChart;

function shiftJISToUTF8(arrayBuffer) {
  const decoder = new TextDecoder('shift-jis');
  const uint8Array = new Uint8Array(arrayBuffer);
  return decoder.decode(uint8Array);
}

function parseCSV(content) {
  const lines = content.trim().split('\n').filter(line => line.trim());
  let h1 = lines[2].split(','), h2 = lines[3].split(','), h3 = lines[4].split(',');
  let headers = h1.map((v, i) => (v + h2[i] + h3[i]).replace(/\r/g, ''));
  const indices = ["年","月","日","平均気温(℃)","降水量の合計(mm)","日照時間(時間)",
    "平均気温(℃)平年値(℃)","降水量の合計(mm)平年値(mm)","日照時間(時間)平年値(時間)",
    "最高気温(℃)","最低気温(℃)","最高気温(℃)平年値(℃)","最低気温(℃)平年値(℃)"]
    .map(h => headers.findIndex(x => x.includes(h)));

  return lines.slice(6).map(line => {
    const cols = line.split(',');
    return {
      date: new Date(cols[0], cols[1]-1, cols[2]),
      temperature: parseFloat(cols[3]) || 0,
      precipitation: parseFloat(cols[4]) || 0,
      sunshine: parseFloat(cols[5]) || 0,
      avgTemperature: parseFloat(cols[6]) || 0,
      avgPrecipitation: parseFloat(cols[7]) || 0,
      avgSunshine: parseFloat(cols[8]) || 0,
      maxTemperature: parseFloat(cols[9]) || 0,
      minTemperature: parseFloat(cols[10]) || 0,
      avgMaxTemperature: parseFloat(cols[11]) || 0,
      avgMinTemperature: parseFloat(cols[12]) || 0
    };
  });
}

function filterData(data, start, end) {
  return data.filter(d => d.date >= start && d.date <= end);
}

function handleFileSelect() {
  const file = document.getElementById("fileInput").files[0];
  if (!file) return;

  const reader = new FileReader();
  reader.onload = e => {
    const content = shiftJISToUTF8(e.target.result);
    csvData = parseCSV(content);
    drawCharts();
  };
  reader.readAsArrayBuffer(file);
}

function drawCharts() {
  const s = new Date(document.getElementById("cultivationStartDate").value);
  const e = new Date(document.getElementById("cultivationEndDate").value);
  if (isNaN(s) || isNaN(e) || s > e) {
    alert("日付が正しくありません"); return;
  }

  const data = filterData(csvData, s, e);
  const labels = data.map(d => `${d.date.getMonth()+1}/${d.date.getDate()}`);
  const temp = data.map(d => d.temperature);
  const tmax = data.map(d => d.maxTemperature);
  const tmin = data.map(d => d.minTemperature);
  const prec = data.map(d => d.precipitation);
  const sun = data.map(d => d.sunshine);

  const tempMax = parseFloat(document.getElementById("tempMax").value) || 40;
  const precMax = parseFloat(document.getElementById("precMax").value) || 100;
  const sunMax = parseFloat(document.getElementById("sunMax").value) || 16;

  if (dailyTempChart) dailyTempChart.destroy();
  dailyTempChart = new Chart(document.getElementById("dailyTempChart"), {
    type: 'line',
    data: {
      labels,
      datasets: [
        { label: '平均気温', data: temp, borderColor: 'orange' },
        { label: '最高気温', data: tmax, borderColor: 'red' },
        { label: '最低気温', data: tmin, borderColor: 'blue' }
      ]
    },
    options: { scales: { y: { suggestedMax: tempMax } } }
  });

  if (dailyPrecChart) dailyPrecChart.destroy();
  dailyPrecChart = new Chart(document.getElementById("dailyPrecChart"), {
    type: 'bar',
    data: { labels, datasets: [{ label: '降水量', data: prec, backgroundColor: 'blue' }] },
    options: { scales: { y: { suggestedMax: precMax } } }
  });

  if (dailySunChart) dailySunChart.destroy();
  dailySunChart = new Chart(document.getElementById("dailySunChart"), {
    type: 'bar',
    data: { labels, datasets: [{ label: '日照時間', data: sun, backgroundColor: 'gold' }] },
    options: { scales: { y: { suggestedMax: sunMax } } }
  });

  document.getElementById("mainTitle").textContent = `${s.getFullYear()}年〜${e.getFullYear()}年の気象経過`;
}
</script>
</body>
</html>
