<!DOCTYPE html>
<html lang="ja">
<head>
<meta name="description" content="気象データの日別値と平年値をグラフ化する。">  
<meta name="author" content="澤田泰人">
<meta name="date" content="2025年5月4日">
<meta charset="UTF-8">
<title>気象経過</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation@latest"></script>
<style>
/* 印刷用の設定 */
@media print {
  * {
    margin: 0;
    padding: 0;
  }
  input,
  button,
  select,
  label,
  form,
  h5,
  h3 {
    display: none !important;
  }
}
button {
  background-color: #4CAF50;
  color: white;
  padding: 10px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  text-align: right;
}
form {
  flex: 1;
  margin: 20px;
  padding: 40px;
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  width: 200px;
}
h1 {
  background-color: #4CAF50;
  color: white;
  padding: 10px;
  text-align: center;
}
label {
  display: flex;
  align-items: center;
  gap: 8px;
}
.chart-container {
  width: 100%;
  max-width: 400px;
  margin: 0 auto;
}
canvas {
  width: 100% !important;
  height: auto !important;
}
.container {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  justify-content: flex-start;
}
.right-align {
  text-align: right;
}
.table-container, .chart-container {
  flex: 1;
  min-width: 300px;
}
input[type="date"], input[type="file"], input[type="number"] {
  width: 150px;
  padding: 8px 10px;
  font-size: 16px;
  margin-bottom: 12px;
  border: 1px solid #ccc;
  border-radius: 4px;
}
.GraphupdateButton {
  background-color: #4CAF50;
  color: white;
  padding: 8px 12px;
  font-size: 16px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  margin-left: 4px;
}
#chartcanvas {
  width: 80%;
  height: auto;
  padding: 10px;
  position: absolute;
  right: 100px;
}
</style>
</head>
<body>
<h1 id="mainTitle">気象経過</h1>

<div class="right-align">
    <button onclick="window.open('https://www.data.jma.go.jp/gmd/risk/obsdl/index.php', '_blank')">気象庁のサイトを開く</button>
</div>
<br>
<span id="csvDates"></span>
<button id="updateButton" type="button">更新</button>
<div class="container">
    <form onsubmit="return false;">
        <label for="cultivationStartDate">開始日:</label>
        <input type="date" id="cultivationStartDate">
        <label for="cultivationEndDate">終了日（最終日）:</label>
        <input type="date" id="cultivationEndDate">
    </form>
</div>
<div id="chartcanvas" style="margin-top: 5em; display: none;">
<h3>日データ</h3>
<div style="margin-bottom: 3em;">
  <label>
    縦軸最大値（気温）:
    <input type="number" id="tempMax" value="40" step="5" placeholder="例: 40">
  </label>
  <button type="button" class="GraphupdateButton" onclick="handleGraphUpdate()">グラフ更新</button>
  <canvas id="dailyTempChart"></canvas>
</div>
<div style="margin-bottom: 3em;">
  <label>
    縦軸最大値（降水量）:
    <input type="number" id="precMax" value="100" step="10" placeholder="例: 100">
  </label>
  <button type="button" class="GraphupdateButton" onclick="handleGraphUpdate()">グラフ更新</button>
  <canvas id="dailyPrecChart"></canvas>
</div>
<div style="margin-bottom: 3em;">
  <label>
    縦軸最大値（日照時間）観測を実施する地点のみ:
    <input type="number" id="sunMax" value="16"  step="2" placeholder="例: 15">
  </label>
  <button type="button" class="GraphupdateButton" onclick="handleGraphUpdate()">グラフ更新</button>
  <canvas id="dailySunChart"></canvas>
</div>
</div>
<script>
let csvData = []; // グローバルに保持

async function loadCSVAndRender() {
    const response = await fetch('出雲日別値.csv');
    const arrayBuffer = await response.arrayBuffer();
    const utf8Content = shiftJISToUTF8(arrayBuffer);
    csvData = parseCSV(utf8Content);

    // CSVの日付範囲の取得
    if (csvData.length > 0) {
        const dates = csvData.map(d => d.date).sort((a, b) => a - b);
        const minDate = dates[0], maxDate = dates[dates.length - 1];
        document.getElementById("csvDates").textContent =
            `CSV日付範囲: ${minDate.getFullYear()}-${minDate.getMonth() + 1}-${minDate.getDate()} ～ ${maxDate.getFullYear()}-${maxDate.getMonth() + 1}-${maxDate.getDate()}`;
    }

    // デフォルト日付をセット
    updateDateFields();
    // タイトル初期化
    updateMainTitle();
    // 初回グラフ描画
    handleGraphUpdate();
}

// グラフ再描画
function handleGraphUpdate() {
    if (!csvData || csvData.length === 0) return;
    const startDate = new Date(document.getElementById("cultivationStartDate").value);
    const endDate = new Date(document.getElementById("cultivationEndDate").value);

    // 平年値の範囲：1年前から1年間
    const avgStart = new Date(startDate);
    avgStart.setFullYear(avgStart.getFullYear() - 1);
    const avgEnd = new Date(avgStart);
    avgEnd.setDate(avgEnd.getDate() + 364);
    const minDate = Math.min(startDate, avgStart);
    const maxDate = Math.max(endDate, avgEnd);

    // データをフィルタリング
    const filteredData = filterData(csvData, minDate, maxDate);
    const chartData = prepareComparisonData(filteredData, startDate, endDate);
    updateDailyCharts(chartData);
    document.getElementById("chartcanvas").style.display = "block";
    updateMainTitle();
}

// タイトル更新（日付のみ）
function updateMainTitle() {
    const startDate = document.getElementById("cultivationStartDate").value;
    const endDate = document.getElementById("cultivationEndDate").value;
    if (startDate && endDate) {
        const startYear = new Date(startDate).getFullYear();
        const endYear = new Date(endDate).getFullYear();
        const title = `${startYear}年-${endYear}年　気象経過`;
        document.getElementById("mainTitle").textContent = title;
    }
}

// 日付自動セット
function updateDateFields() {
    const currentDate = new Date();
    const currentYear = currentDate.getFullYear();
    const currentMonth = String(currentDate.getMonth() + 1).padStart(2, '0');
    const currentDay = String(currentDate.getDate()).padStart(2, '0');
    const startDateInput = document.getElementById('cultivationStartDate');
    const endDateInput = document.getElementById('cultivationEndDate');
    startDateInput.value = `${currentYear}-01-01`;
    endDateInput.value = `${currentYear}-${currentMonth}-${currentDay}`;
}

// イベント登録
window.addEventListener('DOMContentLoaded', loadCSVAndRender);
document.getElementById('updateButton').addEventListener('click', handleGraphUpdate);
document.getElementById("cultivationStartDate").addEventListener("change", function(){
    updateMainTitle();
    handleGraphUpdate();
});
document.getElementById("cultivationEndDate").addEventListener("change", function(){
    updateMainTitle();
    handleGraphUpdate();
});

// ShiftJIS→UTF8
function shiftJISToUTF8(arrayBuffer) {
    const decoder = new TextDecoder('shift-jis');
    const uint8Array = new Uint8Array(arrayBuffer);
    return decoder.decode(uint8Array);
}

// CSVパース
function parseCSV(content) {
    const lines = content.trim().split('\n').filter(line => line.trim() !== "");
    let lines1 = lines[2].split(',');
    let lines2 = lines[3].split(',');
    let lines3 = lines[4].split(',');
    let combinedHead = [];
    for (let i = 0; i < lines1.length; i++) {
        combinedHead.push(lines1[i].replace(/\r/g, '') + lines2[i].replace(/\r/g, '') + lines3[i].replace(/\r/g, ''));
    }
    const targetHeaders = ["年", "月", "日", "平均気温(℃)", "降水量の合計(mm)", "日照時間(時間)",
        "平均気温(℃)平年値(℃)", "降水量の合計(mm)平年値(mm)", "日照時間(時間)平年値(時間)",
        "最高気温(℃)", "最低気温(℃)", "最高気温(℃)平年値(℃)", "最低気温(℃)平年値(℃)"];
    let indicesToSelect = targetHeaders.map(header => combinedHead.findIndex(h => h.includes(header)));
    const dataLines = lines.slice(6).map(line => {
        const cols = line.split(',');
        const selectedCols = indicesToSelect.map(index => index >= 0 ? cols[index] || '0' : '0');
        return selectedCols.join(',');
    });
    dataLines.unshift(targetHeaders.join(','));
    return dataLines.slice(1).map(line => {
        const cols = line.split(",");
        return {
            date: new Date(Date.UTC(cols[0], cols[1] - 1, cols[2])),
            temperature: parseFloat(cols[3]) || 0,
            precipitation: parseFloat(cols[4]) || 0,
            sunshine: parseFloat(cols[5]) || 0,
            avgTemperature: parseFloat(cols[6]) || 0,
            avgPrecipitation: parseFloat(cols[7]) || 0,
            avgSunshine: parseFloat(cols[8]) || 0,
            maxTemperature: parseFloat(cols[9]) || 0,
            minTemperature: parseFloat(cols[10]) || 0,
            avgMaxTemperature: parseFloat(cols[11]) || 0,
            avgMinTemperature: parseFloat(cols[12]) || 0
        };
    });
}
function filterData(data, graphStart, graphEnd) {
    return data.filter(d => d.date >= graphStart && d.date <= graphEnd);
}
function prepareComparisonData(data, startDate, endDate) {
    const dailyMap = {};
    const avgMap = {};

    data.forEach(d => {
        const dateKey = `${d.date.getMonth() + 1}-${d.date.getDate()}`;
        if (d.date >= startDate && d.date <= endDate) {
            dailyMap[dateKey] = {
                temperature: d.temperature,
                precipitation: d.precipitation,
                sunshine: d.sunshine,
                maxTemperature: d.maxTemperature,
                minTemperature: d.minTemperature
            };
        }
        if (d.avgTemperature !== null && !isNaN(d.avgTemperature)) {
            avgMap[dateKey] = avgMap[dateKey] || {};
            avgMap[dateKey].temperature = d.avgTemperature;
        }
        if (d.avgPrecipitation !== null && !isNaN(d.avgPrecipitation)) {
            avgMap[dateKey] = avgMap[dateKey] || {};
            avgMap[dateKey].precipitation = d.avgPrecipitation;
        }
        if (d.avgSunshine !== null && !isNaN(d.avgSunshine)) {
            avgMap[dateKey] = avgMap[dateKey] || {};
            avgMap[dateKey].sunshine = d.avgSunshine;
        }
        if (d.avgMaxTemperature !== null && !isNaN(d.avgMaxTemperature)) {
            avgMap[dateKey] = avgMap[dateKey] || {};
            avgMap[dateKey].maxTemperature = d.avgMaxTemperature;
        }
        if (d.avgMinTemperature !== null && !isNaN(d.avgMinTemperature)) {
            avgMap[dateKey] = avgMap[dateKey] || {};
            avgMap[dateKey].minTemperature = d.avgMinTemperature;
        }
    });

    const labels = [];
    const dailyTemps = [], avgTemps = [];
    const dailyPrecs = [], avgPrecs = [];
    const dailySuns = [], avgSuns = [];
    const dailyMaxTemps = [], avgMaxTemps = [];
    const dailyMinTemps = [], avgMinTemps = [];

    const current = new Date(startDate);
    const endCurrent = new Date(endDate);

    while (current <= endCurrent) {
        const yearTwoDigits = String(current.getFullYear()).slice(-2);
        const md = `${yearTwoDigits}-${current.getMonth() + 1}-${current.getDate()}`;
        labels.push(md);

        const d = dailyMap[`${current.getMonth() + 1}-${current.getDate()}`];
        const a = avgMap[`${current.getMonth() + 1}-${current.getDate()}`];

        dailyTemps.push(d ? d.temperature : null);
        avgTemps.push(a && a.temperature !== undefined ? a.temperature : null);
        dailyPrecs.push(d ? d.precipitation : null);
        avgPrecs.push(a && a.precipitation !== undefined ? a.precipitation : null);
        dailySuns.push(d ? d.sunshine : null);
        avgSuns.push(a && a.sunshine !== undefined ? a.sunshine : null);
        dailyMaxTemps.push(d ? d.maxTemperature : null);
        avgMaxTemps.push(a && a.maxTemperature !== undefined ? a.maxTemperature : null);
        dailyMinTemps.push(d ? d.minTemperature : null);
        avgMinTemps.push(a && a.minTemperature !== undefined ? a.minTemperature : null);

        current.setDate(current.getDate() + 1);
    }

    return {
        labels,
        temperature: { daily: dailyTemps, avg: avgTemps },
        precipitation: { daily: dailyPrecs, avg: avgPrecs },
        sunshine: { daily: dailySuns, avg: avgSuns },
        maxTemperature: { daily: dailyMaxTemps, avg: avgMaxTemps },
        minTemperature: { daily: dailyMinTemps, avg: avgMinTemps }
    };
}

let dailyTempChart, dailyPrecChart, dailySunChart;

function updateDailyCharts(chartData) {
    const { labels, temperature, maxTemperature, minTemperature, precipitation, sunshine } = chartData;

    let maxTempValue = parseFloat(document.getElementById('tempMax').value);
    if (isNaN(maxTempValue)) maxTempValue = 40;

    let maxPrecValue = parseFloat(document.getElementById('precMax').value);
    if (isNaN(maxPrecValue)) maxPrecValue = 100;

    let maxSunValue = parseFloat(document.getElementById('sunMax').value);
    if (isNaN(maxSunValue)) maxSunValue = 16;

    const createChart = (ctx, type, labels, datasets, yMax) => {
        return new Chart(ctx, {
            type: type,
            data: { labels, datasets },
            options: {
                layout: { padding: { left: 20, right: 20, top: 20, bottom: 20 } },
                plugins: {
                    legend: { labels: { font: { size: 30 } } }
                },
                scales: {
                    x: {
                        ticks: { font: { size: 28 } },
                        title: {
                            display: true,
                            text: '年の下2桁-月-日',
                            font: { size: 30 }
                        }
                    },
                    y: {
                        ticks: { font: { size: 28 } },
                        title: {
                            display: true,
                            text: '',
                            font: { size: 30 }
                        },
                        suggestedMax: yMax
                    }
                }
            }
        });
    };

    // 気温チャート
    if (dailyTempChart) dailyTempChart.destroy();
    dailyTempChart = createChart(
        document.getElementById('dailyTempChart').getContext('2d'),
        'line', labels,
        [
            {
                label: '日々の平均気温(℃)',
                data: temperature.daily,
                borderColor: 'rgba(255, 165, 0, 1)',
                borderWidth: 3,
                fill: false
            },
            {
                label: '平年値気温(℃)',
                data: temperature.avg,
                borderColor: 'rgba(255, 165, 0, 0.5)',
                borderDash: [5, 5],
                borderWidth: 2,
                fill: false
            },
            {
                label: '日々の最高気温(℃)',
                data: maxTemperature.daily,
                borderColor: 'rgba(255, 99, 132, 1)',
                borderWidth: 3,
                fill: false
            },
            {
                label: '平年値最高気温(℃)',
                data: maxTemperature.avg,
                borderColor: 'rgba(255, 99, 132, 0.5)',
                borderDash: [5, 5],
                borderWidth: 2,
                fill: false
            },
            {
                label: '日々の最低気温(℃)',
                data: minTemperature.daily,
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 3,
                fill: false
            },
            {
                label: '平年値最低気温(℃)',
                data: minTemperature.avg,
                borderColor: 'rgba(54, 162, 235, 0.5)',
                borderDash: [5, 5],
                borderWidth: 2,
                fill: false
            }
        ],
        maxTempValue
    );

    // 降水量チャート
    if (dailyPrecChart) dailyPrecChart.destroy();
    dailyPrecChart = createChart(
        document.getElementById('dailyPrecChart').getContext('2d'),
        'bar', labels,
        [
            {
                label: '日々の降水量(mm)',
                data: precipitation.daily,
                backgroundColor: 'rgba(54, 162, 235, 1)',
                maxBarThickness: 10
            },
            {
                label: '平年値降水量(mm)',
                data: precipitation.avg,
                type: 'line',
                borderColor: 'rgba(100, 100, 100, 1)',
                borderDash: [4, 4],
                borderWidth: 2,
                fill: false
            }
        ],
        maxPrecValue
    );

    // 日照時間チャート
    if (dailySunChart) dailySunChart.destroy();
    dailySunChart = createChart(
        document.getElementById('dailySunChart').getContext('2d'),
        'bar', labels,
        [
            {
                label: '日々の日照時間(時間)',
                data: sunshine.daily,
                backgroundColor: 'rgba(255, 206, 86, 1)',
                maxBarThickness: 10
            },
            {
                label: '平年値日照時間(時間)',
                data: sunshine.avg,
                type: 'line',
                borderColor: 'rgba(150, 150, 150, 1)',
                borderDash: [4, 4],
                borderWidth: 2,
                fill: false
            }
        ],
        maxSunValue
    );
}
</script>
</body>
</html>
