<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <title>有効積算温度の到達日予測</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
/* --- ここにあなたのCSS（省略可） --- */
body {
  font-family: "Segoe UI", "Hiragino Kaku Gothic ProN", Meiryo, sans-serif;
  margin: 20px;
  line-height: 1.6;
  background: #f5f7f7;
  color: #333;
}
h1, h2, h3, h4 {
  background-color: #4CAF50;
  color: white;
  padding: 8px 12px;
  border-radius: 4px;
  width: fit-content;
  margin: 10px 0;
}
h1 { text-align: center; }
form, .input-panel {
  margin: 15px 0;
  padding: 10px 15px;
  background-color: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  display: flex;
  flex-wrap: wrap;
  gap: 10px 15px;
  align-items: center;
}
.input-panel label {
  display: flex;
  align-items: center;
  font-weight: bold;
  font-size: 14px;
  white-space: nowrap;
}
.input-panel input[type="date"],
.input-panel input[type="file"],
.input-panel input[type="number"] {
  width: auto;
  min-width: 70px;
  padding: 4px 6px;
  font-size: 14px;
  margin-left: 4px;
  border: 1px solid #ccc;
  border-radius: 4px;
}
.input-panel button {
  background-color: #4CAF50;
  color: white;
  padding: 6px 14px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
}
.input-panel button:hover {
  background-color: #45a049;
}
.container {
  display: flex;
  gap: 20px;
  margin-top: 10px;
  flex-wrap: wrap;
  align-items: flex-start;
}
.table-container, .chart-container {
  flex: 1;
  background: #fff;
  padding: 15px;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
  min-width: 300px;
}
table {
  border-collapse: collapse;
  width: 100%;
  font-size: 14px;
  margin-top: 10px;
  table-layout: fixed;
}
th, td {
  border: 1px solid #ccc;
  padding: 8px;
  text-align: center;
}
th {
  background: #f1f1f1;
}
tr:nth-child(even) td {
  background: #fafafa;
}
.table-container {
  max-width: 600px;
  width: 100%;
  margin: 0 auto;
}
#resultTable {
  table-layout: fixed;
  width: 100%;
}
.chart-container {
  display: flex;
  justify-content: center;
  align-items: center;
}
.chart-container canvas {
  width: 100% !important;
  height: auto !important;
}
@media print {
  * { margin: 0; padding: 0; }
  .table-container, h5, .no-print, img { display: none; }
  .chart-container, .content {
    page-break-inside: avoid;
    page-break-before: auto;
    page-break-after: auto;
  }
}
  </style>
</head>
<body>
  <h2>有効積算温度の到達日表示</h2>
  <!-- ボタン削除済み -->
  <div>
    <span id="csvStatus" style="margin-left:8px;color:#888;"></span>
  </div>
  <div>
    <label>開始日: <input type="date" id="startDate"></label><br><br>
    <label>目標積算温度(℃): <input type="number" id="targetTemp" value="1000"></label><br><br>
    <label>有効温度下限(℃): <input type="number" id="tempMin" value="10"></label><br>
    <label>有効温度上限(℃): <input type="number" id="tempMax" value="30"></label><br><br>
    <label>
      <input type="checkbox" id="useUpperLimit" checked>
      上限超過は無効とする
    </label>
    <button onclick="analyze()">計算</button>
  </div>

<div class="container">
  <div class="table-container">
    <h3>年ごとの到達日一覧</h3>
    <table id="resultTable">
      <colgroup>
        <col style="width: 20%;">
        <col style="width: 20%;">
        <col style="width: 20%;">
      </colgroup>
      <thead>
        <tr>
          <th>年</th>
          <th>到達日数</th>
          <th>到達日</th>
        </tr>
      </thead>
      <tbody>
        <!-- データ行はJSなどで動的に追加 -->
      </tbody>
    </table>
  </div>
  <div class="chart-container">
    <canvas id="chart"></canvas>
  </div>
</div>

<script>
  let weatherData = [];

  window.addEventListener("DOMContentLoaded", () => {
    // 日付初期値設定
    const now = new Date();
    const currentYear = now.getFullYear();
    const jan1 = new Date(currentYear, 0, 1);
    const yyyy = jan1.getFullYear();
    const mm = String(jan1.getMonth() + 1).padStart(2, "0");
    const dd = String(jan1.getDate()).padStart(2, "0");
    const formatted = `${yyyy}-${mm}-${dd}`;
    document.getElementById("startDate").value = formatted;

    // 自動でCSVをfetchして読み込む
    const status = document.getElementById('csvStatus');
    status.textContent = "CSV読込中...";
    fetch('./出雲日別値.CSV')
      .then(response => {
        if (!response.ok) throw new Error("ファイルが見つかりません");
        return response.arrayBuffer();
      })
      .then(buffer => {
        // Shift-JISデコード
        let text;
        try {
          text = new TextDecoder('shift_jis').decode(buffer);
        } catch(e) {
          // Firefoxなどでは 'sjis' も試す
          text = new TextDecoder('sjis').decode(buffer);
        }
        weatherData = parseCSV(text);
        if (weatherData.length > 0) {
          status.textContent = "CSV読込完了";
        } else {
          status.textContent = "データ無し";
        }
      })
      .catch(err => {
        status.textContent = "CSV読込失敗: " + err.message;
        weatherData = [];
      });
  });

  function parseCSV(text) {
    const lines = text.trim().split("\n").map(l => l.replace(/\r$/, ''));
    if (lines.length < 3) {
      alert("CSVの行数が不足しています");
      return [];
    }
    const headers = lines[2].split(",");
    const yearIndex = headers.findIndex(h => h === "年");
    const monthIndex = headers.findIndex(h => h === "月");
    const dayIndex = headers.findIndex(h => h === "日");
    const tempIndex = headers.findIndex(h => h === "平均気温(℃)");

    if ([yearIndex, monthIndex, dayIndex, tempIndex].includes(-1)) {
      alert("CSVの列名が正しく認識できません");
      return [];
    }

    let data = [];
    for (let i = 3; i < lines.length; i++) {
      if (!lines[i].trim()) continue;
      const cells = lines[i].split(",");
      const year = parseInt(cells[yearIndex]);
      const month = parseInt(cells[monthIndex]);
      const day = parseInt(cells[dayIndex]);
      const temp = parseFloat(cells[tempIndex]);
      data.push({ year, month, day, temp });
    }
    return data;
  }

  // analyze関数など、他の関数は従来通りここに追加
</script>
</body>
</html>

