<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <title>有効積算温度の到達日予測</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
/* --- ここにあなたのCSS（省略可） --- */
body {
  font-family: "Segoe UI", "Hiragino Kaku Gothic ProN", Meiryo, sans-serif;
  margin: 20px;
  line-height: 1.6;
  background: #f5f7f7;
  color: #333;
}
h1, h2, h3, h4 {
  background-color: #4CAF50;
  color: white;
  padding: 8px 12px;
  border-radius: 4px;
  width: fit-content;
  margin: 10px 0;
}
h1 { text-align: center; }
form, .input-panel {
  margin: 15px 0;
  padding: 10px 15px;
  background-color: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  display: flex;
  flex-wrap: wrap;
  gap: 10px 15px;
  align-items: center;
}
.input-panel label {
  display: flex;
  align-items: center;
  font-weight: bold;
  font-size: 14px;
  white-space: nowrap;
}
.input-panel input[type="date"],
.input-panel input[type="file"],
.input-panel input[type="number"] {
  width: auto;
  min-width: 70px;
  padding: 4px 6px;
  font-size: 14px;
  margin-left: 4px;
  border: 1px solid #ccc;
  border-radius: 4px;
}
.input-panel button {
  background-color: #4CAF50;
  color: white;
  padding: 6px 14px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
}
.input-panel button:hover {
  background-color: #45a049;
}
.container {
  display: flex;
  gap: 20px;
  margin-top: 10px;
  flex-wrap: wrap;
  align-items: flex-start;
}
.table-container, .chart-container {
  flex: 1;
  background: #fff;
  padding: 15px;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
  min-width: 300px;
}
table {
  border-collapse: collapse;
  width: 100%;
  font-size: 14px;
  margin-top: 10px;
  table-layout: fixed;
}
th, td {
  border: 1px solid #ccc;
  padding: 8px;
  text-align: center;
}
th {
  background: #f1f1f1;
}
tr:nth-child(even) td {
  background: #fafafa;
}
.table-container {
  max-width: 600px;
  width: 100%;
  margin: 0 auto;
}
#resultTable {
  table-layout: fixed;
  width: 100%;
}
.chart-container {
  display: flex;
  justify-content: center;
  align-items: center;
}
.chart-container canvas {
  width: 100% !important;
  height: auto !important;
}
@media print {
  * { margin: 0; padding: 0; }
  .table-container, h5, .no-print, img { display: none; }
  .chart-container, .content {
    page-break-inside: avoid;
    page-break-before: auto;
    page-break-after: auto;
  }
}
  </style>
</head>
<body>
<h2>有効積算温度の到達日表示</h2>

<div>
  <label>開始日: <input type="date" id="startDate"></label><br><br>
  <label>目標積算温度(℃): <input type="number" id="targetTemp" value="1000"></label><br><br>
  <label>有効温度下限(℃): <input type="number" id="tempMin" value="10"></label><br>
  <label>有効温度上限(℃): <input type="number" id="tempMax" value="30"></label><br><br>
  <label>
    <input type="checkbox" id="useUpperLimit" checked>
    上限超過は無効とする
  </label>
  <button onclick="analyze()">計算</button>
</div>

<div class="container">
  <div class="table-container">
    <h3>年ごとの到達日一覧</h3>
    <table id="resultTable">
      <thead>
        <tr>
          <th>年</th>
          <th>到達日数</th>
          <th>到達日</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>
  </div>
  <div class="chart-container">
    <canvas id="chart"></canvas>
  </div>
</div>

<script>
let weatherData = [];

// ページ読み込み時に開始日を当年の1月1日に設定
window.addEventListener("DOMContentLoaded", () => {
  const now = new Date();
  const currentYear = now.getFullYear();
  const jan1 = new Date(currentYear, 0, 1);
  const yyyy = jan1.getFullYear();
  const mm = String(jan1.getMonth() + 1).padStart(2, "0");
  const dd = String(jan1.getDate()).padStart(2, "0");
  document.getElementById("startDate").value = `${yyyy}-${mm}-${dd}`;

  // CSVを自動でfetch
  fetch("出雲日別値.csv")
    .then(response => response.text())
    .then(text => {
      weatherData = parseCSV(text);
      analyze(); // 読み込み後すぐに計算して表示
    })
    .catch(err => console.error("CSV読み込みエラー:", err));
});

// CSVパース
function parseCSV(text) {
  const lines = text.trim().split("\n");
  const headers = lines[2].split(",").map(h => h.trim());

  // 列番号を特定
  const yearIndex  = headers.findIndex(h => h === "年");
  const monthIndex = headers.findIndex(h => h === "月");
  const dayIndex   = headers.findIndex(h => h === "日");
  const tempIndex  = headers.findIndex(h => h === "平均気温(℃)");

  if ([yearIndex, monthIndex, dayIndex, tempIndex].includes(-1)) {
    alert("CSVの列名が正しく認識できません");
    return [];
  }

  const data = [];
  for (let i = 3; i < lines.length; i++) {
    const cells = lines[i].split(",");
    const year  = parseInt(cells[yearIndex]);
    const month = parseInt(cells[monthIndex]);
    const day   = parseInt(cells[dayIndex]);
    const temp  = parseFloat(cells[tempIndex]);
    const date  = new Date(year, month - 1, day);

    if (!isNaN(temp)) {
      data.push({ year, month, day, date, temp });
    }
  }
  return data;
}

// === 集計 ===
let chartInstance = null;

function analyze() {
  if (!weatherData.length) {
    alert("気象データが読み込まれていません");
    return;
  }

  // 入力値取得
  const startDate = new Date(document.getElementById("startDate").value);
  const targetTemp = Number(document.getElementById("targetTemp").value);
  const tempMin = Number(document.getElementById("tempMin").value);
  const tempMax = Number(document.getElementById("tempMax").value);
  const useUpperLimit = document.getElementById("useUpperLimit").checked;

  // 各年ごとに到達日算出
  const results = {};
  let years = Array.from(new Set(weatherData.map(d => d.year))).sort((a,b)=>a-b);

  years.forEach(year => {
    const start = new Date(year, startDate.getMonth(), startDate.getDate());
    let accTemp = 0;
    let reached = false;
    let days = 0;
    let reachDate = null;

    for (const rec of weatherData) {
      if (rec.year !== year) continue;
      if (rec.date < start) continue;

      let t = rec.temp;
      if (t < tempMin) t = 0;
      else if (useUpperLimit && t > tempMax) t = 0;
      else if (!useUpperLimit && t > tempMax) t = tempMax - tempMin > 0 ? tempMax : t;
      else t = t - tempMin;

      if (t > 0) accTemp += t;
      days++;
      if (!reached && accTemp >= targetTemp) {
        reached = true;
        reachDate = rec.date;
        break;
      }
    }

    results[year] = reached ? { days, date: reachDate } : { days: null, date: null };
  });

  // 表更新
  updateTable(results);

  // グラフ更新
  updateChart(results);
}

function updateTable(results) {
  const tbody = document.getElementById("resultTable").querySelector("tbody");
  tbody.innerHTML = "";
  Object.entries(results).forEach(([year, res]) => {
    const tr = document.createElement("tr");
    const tdYear = document.createElement("td");
    tdYear.textContent = year;
    const tdDays = document.createElement("td");
    tdDays.textContent = res.days !== null ? res.days : "-";
    const tdDate = document.createElement("td");
    tdDate.textContent = res.date ? formatDate(res.date) : "-";
    tr.appendChild(tdYear);
    tr.appendChild(tdDays);
    tr.appendChild(tdDate);
    tbody.appendChild(tr);
  });
}

function updateChart(results) {
  const ctx = document.getElementById("chart").getContext("2d");
  const labels = Object.keys(results);
  const data = labels.map(year => results[year].days);

  if (chartInstance) chartInstance.destroy();
  chartInstance = new Chart(ctx, {
    type: "bar",
    data: {
      labels,
      datasets: [{
        label: "到達日数",
        data,
        backgroundColor: "#4caf50",
      }]
    },
    options: {
      responsive: true,
      plugins: {
        legend: { display: false },
        title: { display: true, text: "年ごとの到達日数" }
      },
      scales: {
        y: { beginAtZero: true, title: { display: true, text: "日数" } },
        x: { title: { display: true, text: "年" } }
      }
    }
  });
}

function formatDate(date) {
  if (!(date instanceof Date)) date = new Date(date);
  const y = date.getFullYear();
  const m = String(date.getMonth() + 1).padStart(2, "0");
  const d = String(date.getDate()).padStart(2, "0");
  return `${y}/${m}/${d}`;
}
</script>

</body>
</html>




