<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <title>有効積算温度の到達日</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
body {
  font-family: "Segoe UI", "Hiragino Kaku Gothic ProN", Meiryo, sans-serif;
  margin: 20px;
  line-height: 1.6;
  background: #f5f7f7;
  color: #333;
}

/* ===== 見出し ===== */
h1, h2, h3, h4 {
  background-color: #4CAF50;
  color: white;
  padding: 8px 12px;
  border-radius: 4px;
  width: fit-content;
  margin: 10px 0;
}
h1 { text-align: center; }

/* ===== 入力フォーム ===== */
form, .input-panel {
  margin: 15px 0;
  padding: 10px 15px;
  background-color: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  display: flex;          /* 横並び */
  flex-wrap: wrap;        /* はみ出す場合は折り返し */
  gap: 10px 15px;         /* 項目間の余白 */
  align-items: center;    /* 縦位置を中央揃え */
}

.input-panel label {
  display: flex;
  align-items: center;
  font-weight: bold;
  font-size: 14px;
  white-space: nowrap; /* ラベルを折り返さない */
}

.input-panel input[type="date"],
.input-panel input[type="file"],
.input-panel input[type="number"] {
  width: auto;        /* 必要な幅だけ */
  min-width: 70px;    /* 数値用は最小幅確保 */
  padding: 4px 6px;
  font-size: 14px;
  margin-left: 4px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

.input-panel button {
  background-color: #4CAF50;
  color: white;
  padding: 6px 14px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
}
.input-panel button:disabled {
  background-color: #bbb;
  cursor: not-allowed;
}
.input-panel button:hover:enabled {
  background-color: #45a049;
}
/* ===== レイアウト ===== */
.container {
  display: flex;
  gap: 20px;
  margin-top: 10px;
  flex-wrap: wrap;
  align-items: flex-start;
}

.table-container, .chart-container {
  flex: 1;
  background: #fff;
  padding: 15px;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
  min-width: 300px;
}

/* ===== テーブル ===== */
table {
  border-collapse: collapse;
  width: 100%;
  font-size: 14px;
  margin-top: 10px;
  table-layout: fixed;
}
th, td {
  border: 1px solid #ccc;
  padding: 8px;
  text-align: center;
}
th {
  background: #f1f1f1;
}
tr:nth-child(even) td {
  background: #fafafa;
}
.table-container {
  max-width: 600px;
  width: 100%;
  margin: 0 auto;
}
#resultTable {
  table-layout: fixed;
  width: 100%;
}

/* ===== チャート ===== */
.chart-container {
  display: flex;
  justify-content: center;
  align-items: center;
}
.chart-container canvas {
  width: 100% !important;
  height: auto !important;
}

/* ===== 印刷用 ===== */
@media print {
  * { margin: 0; padding: 0; }
  .table-container, h5, .no-print, img { display: none; }
  .chart-container, .content {
    page-break-inside: avoid;
    page-break-before: auto;
    page-break-after: auto;
  }
}
  </style>
</head>
<body>
<h2>有効積算温度の到達日表示</h2>

<div>
  <label>開始日: <input type="date" id="startDate"></label><br><br>
  <label>目標積算温度(℃): <input type="number" id="targetTemp" value="1000"></label><br><br>
  <label>有効温度下限(℃): <input type="number" id="tempMin" value="10"></label><br>
  <label>有効温度上限(℃): <input type="number" id="tempMax" value="30"></label><br><br>
  <label>
    <input type="checkbox" id="useUpperLimit" checked>
    上限超過は無効とする
  </label>
  <button id="analyzeBtn" disabled>計算</button>
</div>

<div class="container">
  <div class="table-container">
    <h3>年ごとの到達日一覧</h3>
    <table id="resultTable">
      <thead>
        <tr>
          <th>年</th>
          <th>到達日数</th>
          <th>到達日</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>
  </div>
  <div class="chart-container">
    <canvas id="chart"></canvas>
  </div>
</div>

<script>
let weatherData = [];
let csvLoaded = false;

window.resultChart = null;

// ページ読み込み時
window.addEventListener("DOMContentLoaded", () => {
  const now = new Date();
  const yyyy = now.getFullYear();
  document.getElementById("startDate").value = `${yyyy}-01-01`;

  // 計算ボタン無効で開始
  document.getElementById("analyzeBtn").disabled = true;

  // サーバー上のCSVをfetch
  fetch("出雲日別値.csv")
    .then(response => {
      if (!response.ok) throw new Error("CSVの取得に失敗");
      return response.arrayBuffer(); // Shift-JIS → UTF-8用
    })
    .then(buffer => {
      const text = new TextDecoder("shift-jis").decode(buffer);
      weatherData = parseCSV(text);
      csvLoaded = true;
      document.getElementById("analyzeBtn").disabled = false; // 読み込みできたら有効

      // 初回表示
      const results = analyze();
      updateTable(results);
      updateChart(results);
    })
    .catch(err => {
      console.error("CSV読み込みエラー:", err);
      weatherData = [];
      csvLoaded = false;
      document.getElementById("analyzeBtn").disabled = true;
    });

  // 入力値変更でボタン有効化（データが読めていれば）
  ["startDate","targetTemp","tempMin","tempMax","useUpperLimit"].forEach(id => {
    document.getElementById(id).addEventListener("input", () => {
      if (csvLoaded) document.getElementById("analyzeBtn").disabled = false;
    });
  });

  // ボタン押下
  document.getElementById("analyzeBtn").addEventListener("click", () => {
    const results = analyze();
    updateTable(results);
    updateChart(results);
  });
});

// --- CSVパース ---
function parseCSV(content) {
  const lines = content.trim().split(/\r?\n/).filter(line => line.trim() !== "");
  const dataLines = lines.slice(5); // データ本体は6行目以降

  return dataLines.map(line => {
    const cols = line.split(",");
    const num = (v) => {
      const n = parseFloat(v);
      return isNaN(n) ? null : n;
    };

    const year = parseInt(cols[0]);
    const month = parseInt(cols[1]);
    const day = parseInt(cols[2]);

    return {
      year,
      month,
      day,
      date: new Date(year, month - 1, day),
      temp: num(cols[3]),          // 平均気温
      precipitation: num(cols[8]), // 降水量
      sunshine: num(cols[13]),     // 日照時間
      tmax: num(cols[18]),         // 最高気温
      tmin: num(cols[23])          // 最低気温
    };
  });
}

// --- 集計 ---
function analyze() {
  if (weatherData.length === 0) {
    alert("先にCSVを読み込んでください");
    return;
  }

  const startDateInput = new Date(document.getElementById("startDate").value);
  const targetTemp = parseFloat(document.getElementById("targetTemp").value);
  const tempMin = parseFloat(document.getElementById("tempMin").value);
  const tempMax = parseFloat(document.getElementById("tempMax").value);
  const useUpperLimit = document.getElementById("useUpperLimit").checked;

  const startMonth = startDateInput.getMonth();
  const startDay = startDateInput.getDate();

  const results = {};
  const years = [...new Set(weatherData.map(d => d.date.getFullYear()))];

  years.forEach(year => {
    const startDate = new Date(year, startMonth, startDay);
    let total = 0;
    let days = 0;
    let reachedDate = null;

    for (const row of weatherData) {
      if (row.date < startDate) continue;

      const rowYear = row.date.getFullYear();
      if (rowYear !== year && rowYear !== year + 1) break; // 翌年まで許容

      let effTemp = 0;
      if (row.temp >= tempMin) {
        let adjusted = row.temp;

        if (useUpperLimit && row.temp > tempMax) {
          adjusted = tempMax;
        } else if (!useUpperLimit && row.temp > tempMax) {
          adjusted = NaN;
        }

        if (!isNaN(adjusted) && adjusted >= tempMin) {
          effTemp = adjusted - tempMin;
        }
      }

      total += effTemp;
      days++;

      if (total >= targetTemp) {
        reachedDate = new Date(startDate);
        reachedDate.setDate(startDate.getDate() + days);
        break;
      }
    }

    results[year] = {
      reached: !!reachedDate,
      days: reachedDate ? days : null,
      date: reachedDate
    };
  });

  // === 翌年に繰り返す処理 ===
  const repeated = {};
  for (const y of Object.keys(results)) {
    const r = results[y];
    if (r.reached) {
      const nextYear = parseInt(y) + 1;
      const d = new Date(r.date);
      d.setFullYear(nextYear); // 翌年の日付にずらす
      repeated[nextYear] = {
        reached: true,
        days: r.days,
        date: d
      };
    }
  }
  Object.assign(results, repeated);

  // === 表に出力 ===
  const table = document.getElementById("resultTable");
  table.innerHTML = "<tr><th>年</th><th>到達日数</th><th>到達日</th></tr>";
  const labels = [];
  const values = [];

  for (const year of Object.keys(results).sort()) {
    const r = results[year];
    if (r.reached) {
      const d = r.date;
      const dStr =
        d.getFullYear() + "-" +
        (d.getMonth() + 1).toString().padStart(2, "0") + "-" +
        d.getDate().toString().padStart(2, "0");
      table.innerHTML += `<tr><td>${year}</td><td>${r.days}</td><td>${dStr}</td></tr>`;
      labels.push(year);
      values.push(r.days);
    } else {
      table.innerHTML += `<tr><td>${year}</td><td>—</td><td>未到達</td></tr>`;
    }
  }

  // === グラフ表示 ===
  const ctx = document.getElementById("chart").getContext("2d");
  if (window.resultChart) {
    window.resultChart.destroy();
  }
  window.resultChart = new Chart(ctx, {
    type: "line",
    data: {
      labels,
      datasets: [{
        label: "目標積算温度到達日数",
        data: values,
        borderColor: "red",
        borderWidth: 2,
        fill: false
      }]
    },
    options: {
      responsive: true,
      plugins: {
        legend: {
          labels: { font: { size: 16 } }
        },
        title: {
          display: true,
          text: "有効積算温度の到達日数",
          font: { size: 24 }
        }
      },
      scales: {
        y: {
          title: { display: true, text: "日数", font: { size: 16 } },
          ticks: { font: { size: 14 } }
        },
        x: {
          title: { display: true, text: "年", font: { size: 16 } },
          ticks: { font: { size: 14 } }
        }
      }
    }
  });
}


function formatDate(date) {
  if (!(date instanceof Date)) date = new Date(date);
  const y = date.getFullYear();
  const m = String(date.getMonth() + 1).padStart(2, "0");
  const d = String(date.getDate()).padStart(2, "0");
    return `${y}-${m}-${d}`; 
}
</script>

</body>
</html>



