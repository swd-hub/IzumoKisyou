<!DOCTYPE html>
<html lang="ja">
<head>
    <meta name="discription" content="気象データを用いて日別値の有効積算温度、累積降水量、有効日照時間の積算を計算し、２年分をグラフ化して比較する。">  
    <meta name="auther" content="澤田泰人">
    <meta name="date" content="2025年5月4日">
    <meta charset="UTF-8">
<title>有効データの年次比較</title>
    <meta name="robots" content="noindex">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather Data Visualizer</title>
    <script src=" https://cdn.jsdelivr.net/npm/chart.js "></script>
    <script src=" https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation@latest "></script>

<style>
/* 最後の行の下線は不要な場合 */
@media print {
  * {
    margin: 0;
    padding: 0;
  }
  .ss-container, #ssDataTable, button, h5, h3, h4 {
    display: none;
  }
  .bottom-row-container {
    display: block !important;
    /* 印刷時も表示 */
  }
  .ss-container, .charts-container {
    width: 100% !important;
    /* 印刷時は横幅いっぱい */
    flex-direction: column !important;
    /* 縦に並べる */
  }
  .chart-container {
    width: 100% !important;
    /* 印刷時は横幅いっぱい */
    height: auto !important;
    /* 高さは自動調整 */
  }
}
body {
  font-family: sans-serif;
  margin: 20px;
}
button {
  background-color: #4CAF50;
  color: white;
  padding: 10px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  margin-right: 10px;
}
h1 {
  background-color: #4CAF50;
  color: white;
  padding: 10px;
  text-align: center;
}
h2 {
  background-color: #4CAF50;
  color: white;
  padding: 10px;
  text-align: left;
}
h3, h4 {
  display: none;
}
h5 {
  margin-bottom: 10px;
}
label {
  display: block;
  margin-bottom: 8px;
  font-weight: bold;
}
.bottom-row-container {
  display: flex;
  gap: 20px;
  width: 100%;
  /* 画面の端いっぱい */
  align-items: flex-start;
}
.charts-container {
  flex: 1;
  /* 残りのスペースを占める */
  display: flex;
  flex-direction: column;
  gap: 15px;
  width: 800px;
  height: 3800px;
}
.definition-container {
  flex: 1;
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  padding: 20px;
}
.definition-results-container {
  display: flex;
  flex: 1;
  gap: 20px;
}
.input-form {
  flex: 0 0 30%;
  /* 幅を調整 */
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  padding: 20px;
}
.results-container {
  flex: 1;
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  padding: 20px;
}
.right-align {
  text-align: right;
  margin-bottom: 10px;
}
.slider {
  position: relative;
  width: 40px;
  /* スライダーの幅を調整 */
  height: 20px;
  /* スライダーの高さを調整 */
  cursor: pointer;
  background-color: #ccc;
  transition: 0.4s;
  border-radius: 20px;
  /* 丸みを調整 */
}
.ss-container {
  flex: 0 0 30%;
  /* 幅を調整 */
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  padding: 20px;
}
.switch {
  position: relative;
  display: flex;
  /* Flexboxで配置 */
  align-items: center;
  /* 縦方向中央揃え */
  width: auto;
  /* 幅をコンテンツに合わせて調整 */
  height: auto;
  /* 高さをコンテンツに合わせて調整 */
  margin-bottom: 10px;
  /* 下の要素との間隔を調整 */
}
.top-row-container {
  display: flex;
  gap: 20px;
  margin-bottom: 20px;
  /* 1段目と2段目の間隔 */
  align-items: flex-start;
}
.chart-container canvas {
  width: 100%;
  height: 100%;
}
.slider:before {
  position: absolute;
  content: "";
  height: 16px;
  /* ボールの高さを調整 */
  width: 16px;
  /* ボールの幅を調整 */
  left: 2px;
  /* ボールの左からの位置を調整 */
  bottom: 2px;
  /* ボールの下からの位置を調整 */
  background-color: white;
  transition: 0.4s;
  border-radius: 50%;
  /* ボールを丸く */
}
.switch input {
  opacity: 0;
  width: 0;
  height: 0;
}
.switch span {
  margin-left: 10px;
  /* チェックボックスとテキストの間にスペースを追加 */
  white-space: nowrap;
  /* テキストが折り返さないように */
}
input[type="date"], input[type="file"], input[type="number"] {
  width: calc(100% - 24px);
  padding: 12px;
  font-size: 16px;
  margin-bottom: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box;
}
.definition-container table td {
  border-bottom: 1px solid #ddd;
  /* 薄いグレーの線を下に追加 */
  padding: 10px;
  /* 必要に応じてpaddingを調整 */
  font-size: 18px;
}
input:checked + .slider {
  background-color: #2196F3;
}
input:checked + .slider:before {
  transform: translatex(20px);
  /* ボールの移動距離を調整 */
}
.definition-container table tr:last-child td {
  border-bottom: none;
}
#cumulativeDataTable {
  width: 50%;
  /* 幅を半分に */
  font-size: 18px;
  padding: 5px;
  margin: 10px 0;
  border-collapse: collapse;
  /* 黒の罫線 */
}
#ssDataTable {
  width: 100%;
  font-size: 16px;
  padding: 5px;
  margin: 10px 0;
  border-collapse: collapse;
  border: 1px solid black;
  /* 黒の罫線 */
}
#ssDataTable td, #ssDataTable th {
  border: 1px solid black;
  /* セルごとに黒の罫線 */
  padding: 12px;
  font-size: 16px;
  text-align: left;
}
#ssDataTable tr:last-child td {
  border-bottom: none;
}
</style>
    </head>
<body>
    <h1>有効データの年次比較</h1>
    <div class="right-align">
        <button onclick="window.open(' https://www.data.jma.go.jp/gmd/risk/obsdl/index.php ', '_blank')">気象庁のサイトを開く</button>
        <!--button onclick="window.open('images/WetherOption.png', '_blank')">過去の気象データ・ダウンロードで選ぶ表示オプション</button-->
    </div>
    <br>
   <h5 id="csv-date-range">CSVの日付範囲を取得中...</h5>

    <div class="top-row-container">
        <form class="input-form">
 <h2>条件入力</h2>
 <label for="tempMin">有効気温下限:</label>
 <input type="number" value="5" id="tempMin" step="1"><br><br>
 <label for="tempMax">有効気温上限:</label>
 <input type="number" value="30" id="tempMax" step="1"><br><br>
 <label for="cultivationStartDate">栽培開始日:</label>
 <input type="date" id="cultivationStartDate"><br><br>
 <label for="cultivationEndDate">栽培終了日:</label>
 <input type="date" id="cultivationEndDate"><br><br>
 <label for="compareYear">比較年(栽培開始時 デフォルト前年)　不作年:1993</label>
 <input type="number" id="compareYear"><br><br>
 <label class="switch">
                <input type="checkbox" id="tempSumToggle" checked>
                <span class="slider round"></span>
                ：有効気温上限を超える気温の処理
            </label>
            <button type="button" id="updateButton">データ更新</button>
        </form>

        <div class="definition-results-container">
            <div class="definition-container">
                <h2>このアプリケーションでの定義</h2>
                <table>
                    <tr>
                        <td>有効温度</td>
                        <td>作物の生育に適する気温</td>
                    </tr>
                    <tr>
                        <td>有効積算温度</td>
                        <td>有効気温上限と下限の範囲にある気温から有効気温下限を減じた値を積算</td>
                    </tr>
                    <tr>
                        <td>累積降水量</td>
                        <td>栽培期間の降水量の累積</td>
                    </tr>
                    <tr>
                        <td>有効日照時間の積算</td>
                        <td>有効温度が０を超える場合での日照時間の積算</td>
                    </tr>
                    <tr>
                        <td>有効気温上限を超える気温の処理</td>
                        <td>ON：有効気温上限を超える気温を有効気温上限に換える</br>OFF：有効気温上限を超える気温を省く</td>
                    </tr>
                </table>
            </div>

            <div class="results-container">
                <h2>栽培期間の集計結果</h2>
                <table id="cumulativeDataTable" class="cumulativeDataTable"></table>
            </div>
        </div>
    </div>

    <div class="bottom-row-container">
        <div class="ss-container">
            <h2>　偏差平方和（SS）によるグラフの類似</h2>
            <p>　似ている：黄　似ていない：赤</p>
            <table id="ssDataTable" class="cumulativeDataTable">
                <thead>
                    <tr>
                        <th>比較年</th>
                        <th>有効積算温度 SS</th>
                        <th>累積降水量 SS</th>
                        <th>有効日照時間の積算 SS</th>
                        <th>比較日数</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
        <div class="charts-container">
            <h2>有効積算値の比較</h2>
            <div class="chart-container">
                <canvas id="cumulativeTempChart"></canvas>
            </div>
            <div class="chart-container">
                <canvas id="cumulativePrecChart"></canvas>
            </div>
            <div class="chart-container">
                <canvas id="cumulativeSunChart"></canvas>
            </div>
        </div>
    </div>

</body>
    <script>
        // グローバルにCSVデータを保持
let loadedCSVData = null;

window.addEventListener('DOMContentLoaded', function() {
  updateDateFields();
  fetch('出雲日別値.csv')
    .then(response => response.arrayBuffer())
    .then(arrayBuffer => {
      const csvText = shiftJISToUTF8(arrayBuffer);
      loadedCSVData = parseCSV(csvText);
      // ここで初回グラフ描画
      updateAllViews();
    });

  // 「更新」ボタンで再描画
  document.getElementById('updateButton').addEventListener('click', updateAllViews, false);
});

function updateAllViews() {
  if (!loadedCSVData) return; // CSV未読込なら何もしない

  // 各種フォーム値を取得
  const startDate = new Date(document.getElementById("cultivationStartDate").value);
  const endDate = new Date(document.getElementById("cultivationEndDate").value);
  const compareYear = parseInt(document.getElementById("compareYear").value, 10);
  const tempMin = parseFloat(document.getElementById("tempMin").value);
  const tempMax = parseFloat(document.getElementById("tempMax").value);

  const compareStartDate = new Date(startDate);
  compareStartDate.setFullYear(compareYear);

  const yearDifference = endDate.getFullYear() - startDate.getFullYear();
  const compareEndDate = new Date(endDate);
  compareEndDate.setFullYear(compareYear + yearDifference);

  const filteredBaseData = filterData(loadedCSVData, startDate, endDate);
  const filteredCompareData = filterData(loadedCSVData, compareStartDate, compareEndDate);

  calculateCumulativeSS(loadedCSVData, startDate, endDate, yearDifference, tempMin, tempMax);

  const baseStartDate = new Date(startDate);
  const normalizedCompareData = filteredCompareData.map(entry => {
    const compareDate = new Date(entry.date);
    const dayOffset = Math.floor((compareDate - new Date(filteredCompareData[0].date)) / (1000 * 60 * 60 * 24));
    const normalizedDate = new Date(baseStartDate);
    normalizedDate.setDate(baseStartDate.getDate() + dayOffset);
    return { ...entry, date: normalizedDate };
  });

  const cumulativeBaseData = calculateCumulativeDataWithTable(filteredBaseData, startDate, endDate, tempMin, tempMax);
  const cumulativeCompareData = calculateCumulativeDataWithTable(normalizedCompareData, startDate, endDate, tempMin, tempMax);

  updateCumulativeCharts(cumulativeBaseData, cumulativeCompareData, startDate, endDate, compareStartDate, compareEndDate, tempMin, tempMax);
  updateTable(cumulativeBaseData.table);
}
window.addEventListener('DOMContentLoaded', function() {
  // まず日付フィールドを初期化
  updateDateFields();

  // その後、CSVをfetchして処理
  fetch('出雲日別値.csv')
    .then(response => {
      if (!response.ok) throw new Error('CSVが見つかりません');
      return response.arrayBuffer();
    })
    .then(arrayBuffer => {
      const csvText = shiftJISToUTF8(arrayBuffer);
      const data = parseCSV(csvText);

      // 日付範囲表示（この部分はOK）
      const dates = data.map(d => new Date(d.date));
      dates.sort((a, b) => a - b);
      const minDate = dates[0];
      const maxDate = dates[dates.length - 1];
      function formatDate(d) {
        const y = d.getFullYear();
        const m = String(d.getMonth() + 1).padStart(2, '0');
        const day = String(d.getDate()).padStart(2, '0');
        return `${y}-${m}-${day}`;
      }
      document.getElementById('csv-date-range').textContent = `CSVの日付範囲：${formatDate(minDate)} ～ ${formatDate(maxDate)}`;

      // ↓↓↓ ここからグラフや表の更新処理 ↓↓↓

      // 各種フォーム値を取得
      const startDate = new Date(document.getElementById("cultivationStartDate").value);
      const endDate = new Date(document.getElementById("cultivationEndDate").value);
      const compareYear = parseInt(document.getElementById("compareYear").value, 10);
      const tempMin = parseFloat(document.getElementById("tempMin").value);
      const tempMax = parseFloat(document.getElementById("tempMax").value);

      const compareStartDate = new Date(startDate);
      compareStartDate.setFullYear(compareYear);
      const yearDifference = endDate.getFullYear() - startDate.getFullYear();
      const compareEndDate = new Date(endDate);
      compareEndDate.setFullYear(compareYear + yearDifference);

      const filteredBaseData = filterData(data, startDate, endDate);
      const filteredCompareData = filterData(data, compareStartDate, compareEndDate);

      calculateCumulativeSS(data, startDate, endDate, yearDifference, tempMin, tempMax);

      const baseStartDate = new Date(startDate);
      const normalizedCompareData = filteredCompareData.map(entry => {
        const compareDate = new Date(entry.date);
        const dayOffset = Math.floor((compareDate - new Date(filteredCompareData[0].date)) / (1000 * 60 * 60 * 24));
        const normalizedDate = new Date(baseStartDate);
        normalizedDate.setDate(baseStartDate.getDate() + dayOffset);
        return { ...entry, date: normalizedDate };
      });

      const cumulativeBaseData = calculateCumulativeDataWithTable(filteredBaseData, startDate, endDate, tempMin, tempMax);
      const cumulativeCompareData = calculateCumulativeDataWithTable(normalizedCompareData, startDate, endDate, tempMin, tempMax);

      updateCumulativeCharts(cumulativeBaseData, cumulativeCompareData, startDate, endDate, compareStartDate, compareEndDate, tempMin, tempMax);
      updateTable(cumulativeBaseData.table);
    })
    .catch(error => {
      document.getElementById('csv-date-range').textContent = error.message;
    });
});
        
window.addEventListener('DOMContentLoaded', function() {
  fetch('出雲日別値.csv')
    .then(response => {
      if (!response.ok) throw new Error('CSVが見つかりません');
      return response.arrayBuffer();
    })
    .then(arrayBuffer => {
      const csvText = shiftJISToUTF8(arrayBuffer);
      const data = parseCSV(csvText);

      // 日付の配列を作成
      const dates = data.map(d => new Date(d.date));
      // 日付の昇順ソート
      dates.sort((a, b) => a - b);

      // 最小・最大日付取得
      const minDate = dates[0];
      const maxDate = dates[dates.length - 1];

      // yyyy-mm-dd形式に整形
      function formatDate(d) {
        const y = d.getFullYear();
        const m = String(d.getMonth() + 1).padStart(2, '0');
        const day = String(d.getDate()).padStart(2, '0');
        return `${y}-${m}-${day}`;
      }

      // h5要素に表示
      const rangeText = `CSVの日付範囲：${formatDate(minDate)} ～ ${formatDate(maxDate)}`;
      document.getElementById('csv-date-range').textContent = rangeText;

      // --- 以下、元の自動処理を続ける ---
      // 必要ならここでグラフや集計も実行
    })
    .catch(error => {
      document.getElementById('csv-date-range').textContent = error.message;
    });
});     
       
function updateDateFields() {
 const currentDate = new Date();
 const currentYear = currentDate.getFullYear();
 const currentMonth = String(currentDate.getMonth() + 1).padStart(2, '0'); // Adds leading zero for single-digit months
 const currentDay = String(currentDate.getDate()).padStart(2, '0'); // Adds leading zero for single-digit days

 const startDateInput = document.getElementById('cultivationStartDate');
 const endDateInput = document.getElementById('cultivationEndDate');
 
 const compareYearInput = document.getElementById('compareYear');
 
 startDateInput.value = `${currentYear}-01-01`;
 endDateInput.value = `${currentYear}-${currentMonth}-${currentDay}`;
 
 compareYearInput.value = (currentYear - 1);
 
 
}


    // ページ読み込み時に日付フィールドを更新
    window.onload = updateDateFields;
   
   
        let dailyTempChart, dailyPrecChart, dailySunChart;
        let cumulativeTempChart, cumulativePrecChart, cumulativeSunChart;

        document.addEventListener('DOMContentLoaded', function() {
     //       document.getElementById('fileInput').addEventListener('change', handleFileSelect, false);
     //       document.getElementById('updateButton').addEventListener('click', handleFileSelect, false);
        });

function readCSVFile(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => resolve(reader.result);
        reader.onerror = reject;
        reader.readAsArrayBuffer(file);
    });
}

        function shiftJISToUTF8(arrayBuffer) {
            const decoder = new TextDecoder('shift-jis');
            const uint8Array = new Uint8Array(arrayBuffer);
            return decoder.decode(uint8Array);
        }

        async function updateAndDownloadCSV(file) {
            const content = await readCSVFile(file);
            //console.log('Read CSV Content:', content);

            const utf8Content = shiftJISToUTF8(content);
            //console.log('UTF-8 Content:', utf8Content);

            const parsedData = parseCSV(utf8Content);
            //console.log('Parsed Data:', parsedData);

            const updatedContent = createCSVContent(parsedData);
            //console.log('Updated Content:', updatedContent);

            const bom = '\uFEFF';
            let blob = new Blob([bom + updatedContent], { type: 'text/csv;charset=utf-8;' });
            let link = document.createElement("a");
            link.href = URL.createObjectURL(blob);
            link.setAttribute("download", "updated_data.csv");
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }


//パース
function parseCSV(content) {
   const lines = content.trim().split('\n').filter(line => line.trim() !== "");

    // "数行のヘッダーを結合してcombinedHeadを作成
    let lines1 = lines[2].split(',');
    let lines2 = lines[3].split(',');
    let lines3 = lines[4].split(',');

        let combinedHead = [];
        for (let i = 0; i < lines1.length; i++) {
            combinedHead.push(lines1[i].replace(/\r/g, '') + lines2[i].replace(/\r/g, '') + lines3[i].replace(/\r/g, ''));
        }

    // デバッグログ
    console.log('Combined Header:', combinedHead);

    const targetHeaders = ["年", "月", "日", "平均気温(℃)", "降水量の合計(mm)", "日照時間(時間)"];
   
    let indicesToSelect = targetHeaders.map(header => combinedHead.indexOf(header));

    // デバッグログ
    //console.log('Indices to Select:', indicesToSelect);

    // データ行を処理
    const dataLines = lines.slice(6).map(line => {   //5だった
    const cols = line.split(',');
    const selectedCols = indicesToSelect.map(index => index >= 0 ? cols[index] || '0' : '0'); // 存在しない場合はデフォルト値'0'

       // console.log('Selected Columns:', selectedCols);
        return selectedCols.join(',');
    });

    console.log('Data Lines:', dataLines);

    // ヘッダー行を追加
    dataLines.unshift(targetHeaders.join(','));

    // デバッグログ
    console.log('Data Lines with Header:', dataLines);

    return dataLines.slice(1).map(line => { // ヘッダー行をスキップ
        const cols = line.split(",");
        return {
            date: new Date(Date.UTC(cols[0], cols[1] - 1, cols[2])),
            temperature: parseFloat(cols[3]) || 0,
            precipitation: parseFloat(cols[4]) || 0,
            sunshine: parseFloat(cols[5]) || 0
        };
    });
}



function updateTable(tableData) {
    try {
        //console.log("Table Data:", tableData);
        const table = document.getElementById("cumulativeDataTable");
        table.innerHTML = "";
        tableData.forEach(row => {
            const tr = document.createElement("tr");
            const tdLabel = document.createElement("td");
            const tdValue = document.createElement("td");
            tdLabel.textContent = row.label;
            tdValue.textContent = row.value;
            tr.appendChild(tdLabel);
            tr.appendChild(tdValue);
            table.appendChild(tr);
        });
        //console.log("Table updated successfully");
    } catch (error) {
        //console.error("テーブル更新中にエラーが発生しました:", error);
    }
}

function filterData(data, graphStart, graphEnd) {
return data.filter(d => {
    const itemDate = new Date(d.date);
    return itemDate >= new Date(graphStart) && itemDate <= new Date(graphEnd);
});
}

/*
function handleFileSelect() {
    const file = document.getElementById("fileInput").files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = function (e) {
        const utf8Content = shiftJISToUTF8(e.target.result);
        const data = parseCSV(utf8Content);

        // 栽培開始日と終了日
        const startDate = new Date(document.getElementById("cultivationStartDate").value);
        const endDate = new Date(document.getElementById("cultivationEndDate").value);
        const compareYear = parseInt(document.getElementById("compareYear").value, 10);
        const tempMin = parseFloat(document.getElementById("tempMin").value);
        const tempMax = parseFloat(document.getElementById("tempMax").value);


// **比較年の開始日・終了日を作成**
const compareStartDate = new Date(startDate);
compareStartDate.setFullYear(compareYear);

// 基準年の開始年と終了年の差分を計算して終了年を調整
const yearDifference = endDate.getFullYear() - startDate.getFullYear();

//const compareEndDate = new Date(startDate); // 開始日をベースに終了日を生成
const compareEndDate = new Date(endDate); // 終了日をベースに終了日を生成

compareEndDate.setFullYear(compareYear + yearDifference);

console.log("yearDifference",yearDifference);
console.log("startDate",startDate);
console.log("endDate",endDate);
console.log("compareStartDate",compareStartDate);
console.log("compareEndDate",compareEndDate);


        // **データをフィルタリング**
        const filteredBaseData = filterData(data, startDate, endDate);
        const filteredCompareData = filterData(data, compareStartDate, compareEndDate);

console.log("filteredBaseData",filteredBaseData);
console.log("filteredCompareData",filteredCompareData);

//各年とのSSを作成
calculateCumulativeSS(data, startDate, endDate, yearDifference, tempMin, tempMax)


// **累積データを計算**
// 比較年のデータを基準年の日付に揃える
 const baseStartDate = new Date(startDate); // 基準年の開始日（例: 2024-12-25）
const baseEndDate = new Date(endDate);     // 基準年の終了日（例: 2025-01-30）

const originalCompareStartDate = new Date(filteredCompareData[0].date);
const normalizedCompareData = filteredCompareData.map(entry => {
    const compareDate = new Date(entry.date);

    // 比較年データが比較年の開始日から何日後かを計算
   const dayOffset = Math.floor((compareDate - originalCompareStartDate) / (1000 * 60 * 60 * 24));
    // 基準年の開始日にその日数を足して、比較データを基準カレンダー上に載せる
    const normalizedDate = new Date(baseStartDate);
    normalizedDate.setDate(baseStartDate.getDate() + dayOffset);

    return {
        ...entry,
        date: normalizedDate
    };
});



// 累積データ計算（比較年は揃えた日付で）
const cumulativeBaseData = calculateCumulativeDataWithTable(filteredBaseData, startDate, endDate, tempMin, tempMax);
const cumulativeCompareData = calculateCumulativeDataWithTable(normalizedCompareData, startDate, endDate, tempMin, tempMax);



        // **グラフを更新**
        updateCumulativeCharts(cumulativeBaseData, cumulativeCompareData, startDate, endDate, compareStartDate, compareEndDate, tempMin, tempMax);

        // **テーブルを更新（基準年のみ表示）**
        updateTable(cumulativeBaseData.table);
       
      //  calculateSSforAllYears(data, startDate, endDate);

    };
    reader.readAsArrayBuffer(file);
}
*/


function calculateEffectiveAccumulatedTemperature(data, startDate, endDate, tempMin, tempMax) {
    let effectiveTempSum = 0;
    let validDataCount = 0;
    let effectiveSunSum = 0;
    let precSum = 0;

    // トグルボタンのチェック状態を取得
    const tempSumToggle = document.getElementById('tempSumToggle').checked;

    data.forEach(entry => {
        const date = new Date(entry.date);

                // startDate を 1か月前に設定
                let adjustedStartDate = new Date(startDate);
                adjustedStartDate.setMonth(adjustedStartDate.getMonth() - 1);

                // 栽培期間内の条件の修正
                if (date >= adjustedStartDate && date <= endDate) {
                    let temperature = entry.temperature;


            // トグルボタンがチェックされている場合、温度の上限を適用
            if (tempSumToggle && temperature > tempMax) {
                temperature = tempMax;
            }

            // 気温が下限と上限を満たした場合のみ加算
            if (temperature >= tempMin && temperature <= tempMax && date >= startDate && date <= endDate) {
                effectiveTempSum += (temperature - tempMin); // 下限値を引いた値を積算
                effectiveSunSum += entry.sunshine;
                validDataCount++;
            }

            // 降水量は温度に関係なく加算
            if (date >= startDate && date <= endDate) {
                precSum += entry.precipitation;
            }
        }
    });


    return { effectiveTempSum, effectiveSunSum, validDataCount, precSum };
}


function calculateCumulativeDataWithTable(data, startDate, endDate, tempMin, tempMax) {
    let tempSum = 0, precSum = 0, sunSum = 0;
    let cumulative = { dates: [], temperature: [], precipitation: [], sunshine: [], table: [] };

    // トグルボタンのチェック状態を取得
    const tempSumToggle = document.getElementById('tempSumToggle').checked;


    data.forEach(entry => {
            const date = new Date(entry.date);
    if (date >= startDate && date <= endDate) { //栽培期間　/////////////////
                let temperature = entry.temperature;

            // トグルボタンがチェックされている場合、温度の上限を適用
            if (tempSumToggle) {
                if (temperature > tempMax) {
                    temperature = tempMax;
                }
            }

        // 気温が下限と上限を満たした場合のみ下限値を引く
        if (temperature >= tempMin && temperature <= tempMax && date >= startDate && date <= endDate) {
            tempSum += (temperature - tempMin);
            sunSum += entry.sunshine;
        }
    }
        precSum += entry.precipitation;

        cumulative.dates.push(entry.date.toISOString().split('T')[0]);
        cumulative.temperature.push(tempSum);
        cumulative.precipitation.push(precSum);
        cumulative.sunshine.push(sunSum);
    });

    const cultivationDays = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24)+1); //終了日含む
    const { effectiveTempSum, effectiveSunSum, validDataCount, precSum: calculatedPrecSum } = calculateEffectiveAccumulatedTemperature(data, startDate, endDate, tempMin, tempMax);

    cumulative.table = [
        { label: "栽培期間の日数 (Cultivation Period in Days)", value: cultivationDays },
        { label: "有効データ数 (Valid Data Count)", value: validDataCount },
        { label: "有効積算温度（Effective Cumulative Temperature）:", value: Math.floor(effectiveTempSum) },
        { label: "累積降水量（Cumulative Rainfall）:", value: Math.floor(calculatedPrecSum) },
        { label: "有効日照時間の積算（Accumulated sunshine hours）:", value: Math.floor(effectiveSunSum) }
    ];
    //console.log("Cumulative Data:", cumulative);

    return cumulative;
}



// 累積グラフ
function updateCumulativeCharts(baseData, compareData, startDate, endDate, compareStartDate, compareEndDate, tempMin, tempMax) {
    const ctxTemp = document.getElementById('cumulativeTempChart').getContext('2d');
    const ctxPrec = document.getElementById('cumulativePrecChart').getContext('2d');
    const ctxSun = document.getElementById('cumulativeSunChart').getContext('2d');

// 日付を mm-dd 形式にフォーマットする関数
const formatDatesToMMDD = (dates) => {
    return dates.map(date => {
        const d = new Date(date);
        const month = String(d.getMonth() + 1).padStart(2, '0');
        const day = String(d.getDate()).padStart(2, '0');
        return `${month}-${day}`;
    });
};

// 既存のコードに追加する処理
baseData.dates = formatDatesToMMDD(baseData.dates);
compareData.dates = formatDatesToMMDD(compareData.dates);


    const createChart = (ctx, label, baseDataset, compareDataset, color1, color2, maxLimit) => {
        return new Chart(ctx, {
            type: 'line',
            data: {
                labels: baseData.dates, // **基準年のラベル（X軸）**
                datasets: [
                    {
                        label: `${startDate.getFullYear()}年 (${label})`,
                        data: baseDataset,
                        borderColor: color1,
                        borderWidth: 5,
                        fill: false
                    },
                    {
                        label: `${compareStartDate.getFullYear()}年 (${label})`,
                        data: compareDataset,
                        borderColor: color2,
                        borderWidth: 5,
                        fill: false,
                        borderDash: [5, 5] // **比較年は点線表示**
                    }
                ]
            },
            options: {
                layout: { padding: 20 },
                plugins: {
                    legend: {
                        labels: { font: { size: 20 } }
                    }
                },
                scales: {
                    x: {
                        ticks: { font: { size: 18 } },
                        title: { display: true, text: '日付', font: { size: 20 } }
                    },
                    y: {
                        suggestedMax: maxLimit,
                        ticks: { font: { size: 18 } },
                        title: { display: true, text: '', font: { size: 18 } }
                    }
                }
            }
        });
    };

    if (cumulativeTempChart) cumulativeTempChart.destroy();
    cumulativeTempChart = createChart(ctxTemp, "有効積算温度(℃)", baseData.temperature, compareData.temperature, "rgba(75, 192, 192, 1)", "rgba(255, 99, 132, 1)");//, 4500);

    if (cumulativePrecChart) cumulativePrecChart.destroy();
    cumulativePrecChart = createChart(ctxPrec, "累積降水量(mm)", baseData.precipitation, compareData.precipitation, "rgba(54, 162, 235, 1)", "rgba(255, 159, 64, 1)");//, 2500);

    if (cumulativeSunChart) cumulativeSunChart.destroy();
    cumulativeSunChart = createChart(ctxSun, "有効日照時間の積算(時間)", baseData.sunshine, compareData.sunshine, "rgba(255, 206, 86, 1)", "rgba(153, 102, 255, 1)");//, 2000);
}


//有効データの偏差平方和の計算
function calculateCumulativeSS(data, startDate, endDate, yearDifference, tempMin, tempMax) {
    try {
        const startDateObj = new Date(startDate);
        const endDateObj = new Date(endDate); //栽培期間は年がつく
        //endDateObj.setFullYear(endDateObj.getFullYear() + yearDifference);

console.log("startDateObj",startDateObj);
console.log("endDateObj", endDateObj);

        const baseStartYear = startDateObj.getFullYear();
        const baseEndYear = endDateObj.getFullYear();

        let years = [...new Set(data.map(entry => new Date(entry.date).getFullYear()))];
        let ssResults = [];

        const tempSumToggle = document.getElementById('tempSumToggle').checked;

        years.forEach(compareStartYear => {
            const compareStart = new Date(startDateObj);
            compareStart.setFullYear(compareStartYear);

            const compareEnd = new Date(endDateObj);
            compareEnd.setFullYear(compareStart.getFullYear() + yearDifference);


            const compareEndYear = compareEnd.getFullYear();

            // 基準期間と同じならスキップ
            if (compareStartYear === baseStartYear && compareEndYear === baseEndYear) return;

            const baseDailyData = {};
            const compareDailyData = {};

            // 基準年の日ごとのデータを収集
            data.forEach(entry => {
                const date = new Date(entry.date);
                if (
                    date >= startDateObj && date <= endDateObj &&
                    date.getFullYear() >= baseStartYear && date.getFullYear() <= baseEndYear &&
                    !(date.getMonth() === 1 && date.getDate() === 29)
                ) {
                    const monthDay = `${date.getMonth() + 1}-${date.getDate()}`;
                    baseDailyData[monthDay] = {
                        temperature: entry.temperature,
                        precipitation: entry.precipitation,
                        sunshine: entry.sunshine
                    };
                }
            });

            // 比較年の日ごとのデータを収集
            data.forEach(entry => {
                const date = new Date(entry.date);
                if (
                    date >= compareStart && date <= compareEnd &&
                    !(date.getMonth() === 1 && date.getDate() === 29)
                ) {
                    const monthDay = `${date.getMonth() + 1}-${date.getDate()}`;
                    compareDailyData[monthDay] = {
                        temperature: entry.temperature,
                        precipitation: entry.precipitation,
                        sunshine: entry.sunshine
                    };
                }
            });

            let ssTemp = 0, ssPrec = 0, ssSun = 0;
            let validDays = 0;

            let currentDate = new Date(startDateObj);
            while (currentDate <= endDateObj) {
                if (!(currentDate.getMonth() === 1 && currentDate.getDate() === 29)) {
                    const monthDay = `${currentDate.getMonth() + 1}-${currentDate.getDate()}`;

                    const baseEntry = baseDailyData[monthDay];
                    const compareEntry = compareDailyData[monthDay];

                    if (baseEntry && compareEntry) {
                        let baseTemp = baseEntry.temperature;
                        let compareTemp = compareEntry.temperature;
                        let baseSun = baseEntry.sunshine;
                        let compareSun = compareEntry.sunshine;
                       

                        let baseEffectiveTemp = 0;
                        let compareEffectiveTemp = 0;
                        let baseEffectiveSun = 0;
                        let compareEffectiveSun= 0;
                       
                        if (tempSumToggle) {
                            baseEffectiveTemp = baseTemp >= tempMin ? Math.min(baseTemp, tempMax) - tempMin : 0;
                            compareEffectiveTemp = compareTemp >= tempMin ? Math.min(compareTemp, tempMax) - tempMin : 0;
                            baseEffectiveSun = baseTemp >= tempMin ? baseSun:0;
                            compareEffectiveSun= compareTemp >= tempMin ? compareSun:0;                            

                        } else {
                            baseEffectiveTemp = baseTemp >= tempMin && baseTemp <= tempMax ? baseTemp - tempMin : 0;
                            compareEffectiveTemp = compareTemp >= tempMin && compareTemp <= tempMax ? compareTemp - tempMin : 0;
                            baseEffectiveSun = baseTemp >= tempMin && baseTemp <= tempMax ? baseSun:0;
                            compareEffectiveSun= compareTemp >= tempMin && compareTemp <= tempMax ? compareSun:0;
                        }

                        ssTemp += (baseEffectiveTemp - compareEffectiveTemp) ** 2;
                        ssPrec += (baseEntry.precipitation - compareEntry.precipitation) ** 2;
                        ssSun += (baseEffectiveSun - compareEffectiveSun) ** 2;

                        validDays++;
                    }
                   
                    //console.log("validDays",validDays);
                   
                }
                currentDate.setDate(currentDate.getDate() + 1);
            }

            if (validDays > 0) {
                ssResults.push({
                    year: compareStartYear,
                    tempSS: ssTemp,
                    precSS: ssPrec,
                    sunSS: ssSun,
                    validDays: validDays
                });
            }
        });

        let minTempSS = ssResults.length > 0 ? Math.round(Math.min(...ssResults.map(row => row.tempSS))) : Infinity;
        let minPrecSS = ssResults.length > 0 ? Math.round(Math.min(...ssResults.map(row => row.precSS))) : Infinity;
        let minSunSS = ssResults.length > 0 ? Math.round(Math.min(...ssResults.map(row => row.sunSS))) : Infinity;

        let maxTempSS = ssResults.length > 0 ? Math.round(Math.max(...ssResults.map(row => row.tempSS))) : -Infinity;
        let maxPrecSS = ssResults.length > 0 ? Math.round(Math.max(...ssResults.map(row => row.precSS))) : -Infinity;
        let maxSunSS = ssResults.length > 0 ? Math.round(Math.max(...ssResults.map(row => row.sunSS))) : -Infinity;

        updateSSTable(ssResults); // ← ここを修正

    } catch (error) {
        console.error("累積データのSS計算中にエラーが発生:", error);
    }
}


function updateSSTable(ssData) {
    const ssTableBody = document.querySelector("#ssDataTable tbody");
    ssTableBody.innerHTML = ""; // 表を初期化

    let minTempSS = Infinity, minPrecSS = Infinity, minSunSS = Infinity;
    let minTempRow = null, minPrecRow = null, minSunRow = null;

    let maxTempSS = -Infinity, maxPrecSS = -Infinity, maxSunSS = -Infinity;
    let maxTempRow = null, maxPrecRow = null, maxSunRow = null;

    ssData.forEach(row => {
        const tr = document.createElement("tr");

        const yearTd = document.createElement("td");
        yearTd.textContent = row.year;
        tr.appendChild(yearTd);

        const tempTd = document.createElement("td");
        tempTd.textContent = Math.round(row.tempSS);
        tr.appendChild(tempTd);

        const precTd = document.createElement("td");
        precTd.textContent = Math.round(row.precSS);
        tr.appendChild(precTd);

        const sunTd = document.createElement("td");
        sunTd.textContent = Math.round(row.sunSS);
        tr.appendChild(sunTd);

        const validTd = document.createElement("td");
        validTd.textContent = row.validDays;
        tr.appendChild(validTd);

        if (row.tempSS < minTempSS) { minTempSS = row.tempSS; minTempRow = tempTd; }
        if (row.precSS < minPrecSS) { minPrecSS = row.precSS; minPrecRow = precTd; }
        if (row.sunSS < minSunSS)  { minSunSS = row.sunSS; minSunRow = sunTd; }

        if (row.tempSS > maxTempSS) { maxTempSS = row.tempSS; maxTempRow = tempTd; }
        if (row.precSS > maxPrecSS) { maxPrecSS = row.precSS; maxPrecRow = precTd; }
        if (row.sunSS > maxSunSS)  { maxSunSS = row.sunSS; maxSunRow = sunTd; }

        ssTableBody.appendChild(tr);
    });

    if (minTempRow) minTempRow.style.backgroundColor = "yellow";
    if (minPrecRow) minPrecRow.style.backgroundColor = "yellow";
    if (minSunRow) minSunRow.style.backgroundColor = "yellow";

    if (maxTempRow) maxTempRow.style.backgroundColor = "rgba(255, 0, 0, 0.3)";
    if (maxPrecRow) maxPrecRow.style.backgroundColor = "rgba(255, 0, 0, 0.3)";
    if (maxSunRow) maxSunRow.style.backgroundColor = "rgba(255, 0, 0, 0.3)";
}


 </script>
</body>
</html>
